# To change global config:
git config --global xxx.yyy
# identity
   user.name "John Doe"
   user.email johndoe@example.com
# To set your editor:
   core.editor vim
# To enable color:
   color.ui true

# =====================================
# ADD
# =====================================
# To stage all changes for commit:
git add --all

# =====================================
# STASH
# =====================================
# To stash changes with a message
git stash save "message"
# To list all the stashed changes
git stash list
# To apply the most recent change and remove the stash from the stash list
git stash pop
# To apply any stash from the list of stashes. (stays in stash list)
git stash apply stash@{6}

# =====================================
# RESET
# =====================================
# To removed staged and working directory changes
git reset --hard
# To go 2 commits back
git reset --hard HEAD~2
# To pull changes, overwriting any local commits
git fetch --all
git reset --hard origin/master
# Revert a commit and keep the history of the reverted change as a separate revert commit
git revert <commit SHA>
# Undo parts of last commit in a specific file
git checkout -p HEAD^ -- /path/to/file

# =====================================
# CLEAN
# =====================================
# To remove untracked files
git clean -f -d
# To remove untracked and ignored files
git clean -f -d -x

# =====================================
# PUSH
# =====================================
# To push to the tracked master branch:
git push origin master
# To push to a specified repository:
git push git@github.com:username/project.git
# View commits that will be pushed
git log @{u}..

# =====================================
# BRANCH
# =====================================
# To delete the branch "branch_name"
git branch -D branch_name
# To make an exisiting branch track a remote branch
git branch -u upstream/foo

# =====================================
# LOG
# =====================================
# Commit history of a set of files
git log --pretty=email --patch-with-stat --reverse --full-index -- Admin\*.py > Sripts.patch
# View changes that are new on a feature branch
git log -p feature --not master
git diff master...feature

# =====================================
# SUBMODULE
# =====================================
# Update all your submodules
git submodule update --init --recursive

# =====================================
# MISCELANEOUS
# =====================================
# Create a bare branch (one that has no commits on it)
git checkout --orphan branch_name
# Checkout a new branch from a different starting point
git checkout -b master upstream/master
# To see who commited which line in a file
git blame filename
# Revisions can also be identified with :/text
# So, this will show the first commit that has "cool" in their message body
git show :/cool
# Pich a commit from a branch to current branch. This is different than merge as
# this just applies a single commit from a branch to current branch
git cherry-pick <commit SHA1>
# Diff files WITHOUT considering them a part of git
# This can be used to diff files that are not in a git repo!
git diff --no-index fileA fileB
# Import commits from another repo
git --git-dir=../some_other_repo/.git format-patch -k -1 --stdout <commit SHA> | git am -3 -k
# Interactive rebase for the last 7 commits
git rebase -i @~7

# =====================================
# PRUNE
# =====================================
# Remove all stale branches (ones that have been deleted on remote)
# So if you have a lot of useless branches, delete them on Github and then run this
git remote prune origin
# The following can be used to prune all remotes at once
git remote prune $(git remote | tr '\n' ' ')

# =====================================
# DATE HACKING
# =====================================
# Git commit in the past
# more recent versions of Git also support --date="2 days ago" directly
git commit --date="`date --date='2 day ago'`"
git commit --date="Jun 13 18:30:25 IST 2015"
# To change the date of an existing commit
git filter-branch --env-filter \
    'if [ $GIT_COMMIT = 119f9ecf58069b265ab22f1f97d2b648faf932e0 ]
     then
         export GIT_AUTHOR_DATE="Fri Jan 2 21:38:53 2009 -0800"
         export GIT_COMMITTER_DATE="Sat May 19 01:01:01 2007 -0700"
     fi'

# =====================================
# SHALLOW CLONE
# =====================================
# Perform a shallow clone to only get latest commits
# (helps save data when cloning large repos)
git clone --depth 1 <remote-url>
# To unshallow a clone
git pull --unshallow

# =====================================
# FORK
# =====================================
# To sync a fork with the master repo:
git remote add upstream git@github.com:name/repo.git    # Set a new repo
git remote -v                                           # Confirm new remote repo
git fetch upstream                                      # Get branches
git branch -va                                          # List local - remote branches
git checkout master                                     # Checkout local master branch
git checkout -b new_branch                              # Create and checkout a new branch
git merge upstream/master                               # Merge remote into local repo
git show 83fb499                                        # Show what a commit did.
git show 83fb499:path/fo/file.ext                       # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                              # Check difference between branches
git log                                                 # Show all the commits
git status                                              # Show the changes from last commit

